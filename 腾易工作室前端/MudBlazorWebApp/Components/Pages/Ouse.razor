@page "/Ouse"
@using MudBlazor
@using System.Linq
@inject NavigationManager NavigationManager
<MudStack>
    <MudDatePicker @bind-Date="selectedDateRange.Start" Label="请选择起始日期"></MudDatePicker>
    <MudDatePicker @bind-Date="selectedDateRange.End" Label="请选择结束日期"></MudDatePicker>
    <MudButton OnClick="FilterDiaries">筛选日记</MudButton>
</MudStack>



<MudList T="Diary">
    @if(filteredDiaries!=null&&filteredDiaries.Count==0)
    {
        <MudText>该选择内暂未有内容捏！</MudText>
    }
    else 
        foreach (var diary in filteredDiaries)
        {
            <MudListItem OnClick="()=>NavTo(diary)">
                <MudText Typo="Typo.body1">@diary.DateTime.ToString("yyyy-MM-dd")</MudText>
                <MudText Typo="Typo.body2">@diary.Title</MudText>
            </MudListItem>
        }
</MudList>

@code {
    private DateRange? selectedDateRange { get; set; } = new DateRange();
    private void NavTo(Diary diary)
    {
        string url = diary.URL;
        Settings.SelectedDiary = diary;
        NavigationManager.NavigateTo($"Diary/{url}");
    }



    private List<Diary> filteredDiaries=null!;

    protected override Task OnInitializedAsync()
    {
        if (Settings.DateRange != null)
        {
            selectedDateRange = Settings.DateRange;
        }
        filteredDiaries = DiaryData.AllDiaries;
        return base.OnInitializedAsync();
    }

    // 点击筛选按钮时，过滤日记
    private void FilterDiaries()
    {
        // 将新的日期范围保存到静态类 Settings 中
        Settings.DateRange = selectedDateRange;
        // 根据选择的日期范围来过滤日记
        if (selectedDateRange.Start.HasValue && selectedDateRange.End.HasValue)
        {
            filteredDiaries = DiaryData.AllDiaries
                .Where(d => d.DateTime >= selectedDateRange.Start.Value && d.DateTime <= selectedDateRange.End.Value)
                .ToList();
        }
        else
        {
            filteredDiaries = DiaryData.AllDiaries; // 如果没有选择日期范围，则显示所有日记
        }
    }
}
